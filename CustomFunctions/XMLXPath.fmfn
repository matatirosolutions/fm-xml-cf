/**
 * =====================================
 * XMLXPath
 *
 * PURPOSE:
 *		Parse XML for information based on a limitied subset of XPath selectors.
 *
 * RETURNS:
 *		A string containing the requested XML node(s) or attribute, or null if
 *		if it was not able to locate the requested path
 *
 * PARAMETERS: 
 *		XML			The XML string to parse
 *		XPath		The path to locate within the XML
 *
 * DEPENDENCIES:
 *		XMLNode
 *		XMLFindNode
 *		XMLAttribute
 *
 * VARIABLES:
 *		none
 *
 * NOTES:
 *		none
 *
 * VERSION:
 *		1.0
 *
 * RELEASE: 
 *		2014-10-27
 *
 * AUTHOR:
 *		Steve Winter
 *		Matatiro Solutions
 *		steve@msdev.co.uk
 *
 * REFERENCES:
 *		FM XML Custom functions on github https://github.com/matatirosolutions/fm-xml-cf
 *		Michael Wallace's initial XPath function http://www.briandunning.com/cf/976
 * 		Andy Knasinski's 'extract data' custom function http://www.briandunning.com/cf/1
 * =====================================
 */

Let ([
	// escape any / character within [ ] in the XPath
	Brac			= Middle ( XPath; Position ( XPath; "["; 1; 1) + 1; Position ( XPath; "]"; 1; 1) - Position ( XPath; "["; 1; 1) -1 );
	SafePath		= Substitute ( XPath; Brac; ( Substitute ( Brac; "/"; "~|~") ) );
	
	// find the name of the node, and the sepcific instance where requested
  	NodeList		= Substitute(SafePath; "/"; "¶");
	FirstNode		= Substitute ( GetValue(NodeList; 2); "~|~"; "/" );
	Node			= Case ( Position ( FirstNode; "["; 1 ; 1) = 0; FirstNode; Left ( FirstNode; Position ( FirstNode; "["; 1 ; 1) - 1 ) ); 
	Instance		= Middle ( FirstNode; Position ( FirstNode; "["; 1; 1) + 1; Position ( FirstNode; "]"; 1; 1) - Position ( FirstNode; "["; 1; 1) -1 );

	// determine which function we need to call
	SubXML		= Case ( Position ( Node; "@"; 1; 1)  ≠  0; 
		
		// if there's an @ in the node we need an attribute off the node
		XMLAttribute( XML ; Substitute ( Node ; "@"; "" ) ) ;

		Case ( Position ( Instance; "@"; 1; 1)  ≠  0;

			// if there's an @ in the instance, we need nodes where an attribute matches a specific value
			XMLFindNode ( XML; Node; Substitute ( Instance ; "@"; "" ); 1; "");

			// otherwise we just need the node requested
			XMLNode (XML ; Node ; Instance)
		)
	);

	// drop the first node of the front of the path and recurse if necesary
	NewPath		= Substitute (XPath; "/" & FirstNode; "");
	Result		= Case(IsEmpty(NewPath) or NewPath  = "/"; SubXML; XMLXPath(SubXML; NewPath))
    ];
  Result
)