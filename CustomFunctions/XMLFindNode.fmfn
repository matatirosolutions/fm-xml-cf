/**
 * =====================================
 * XMLFindNode
 *
 * PURPOSE:
 *		Used by XMLXPath to locate node(s) from within the XML which match criteria based on
 * 		attributes on that node.
 *
 *		This is a recursive function which isn't intended to be called directly.
 *
 * RETURNS:
 *		A string containing the requested node content (including the XML tags), or null if
 *		if it was not able to locate the requested node.
 *
 * PARAMETERS: 
 *		XML			The XML string to parse
 *		node		Which node within the XML to locate
 *		query		The query to compare with nodes matching the node name above (in form attribute='match')
 *		instance	Which instance of the node to review
 *		stack		A 'stack' of matched XML nodes which have already been matched
 *
 * DEPENDENCIES:
 *		XMLFindNode
 *
 * VARIABLES:
 *		none
 *
 * NOTES:
 *		none
 *
 * VERSION:
 *		1.0
 *
 * RELEASE: 
 *		2014-10-27
 *
 * AUTHOR:
 *		Steve Winter
 *		Matatiro Solutions
 *		steve@msdev.co.uk
 *
 * REFERENCES:
 *		FM XML Custom functions on github https://github.com/matatirosolutions/fm-xml-cf
 * =====================================
 */

Let([
	// get the 'next' child node
	Instance		= Case ( IsEmpty ( instance ); 1; instance );
	NodeContent	= XMLNode( XML; node; Instance );
	
	// check if it matches
	QueryList		= Substitute ( query; "="; "¶" );
	NodeAttribute	= XMLAttribute( NodeContent; GetValue( QueryList; 1) );
	Stack 		= If ( NodeAttribute = Middle ( GetValue (QueryList; 2); 2; Length ( GetValue (QueryList; 2) ) - 2);
		stack & NodeContent & "¶";
		stack
	);

	// if there was no node content either the node doesn't exist, or we've run out of matching child nodes
	Result		= Case ( IsEmpty ( NodeContent); 
		Stack;
		XMLFindNode ( XML; node; query; Instance + 1; stack)
	)

    ];
  Result
)